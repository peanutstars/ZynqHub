source /opt/pkg/settings.sh

ROOTPATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
GITBRANCH="microzed-2018.2"

zynq() {
    DTC=${ROOTPATH}/build/tmp/sysroots-components/x86_64/dtc-native/usr/bin/dtc
    msg() {
        echo "@@ $*"
    }
    usage() {
        echo
        echo " Usage: zynq <cmd> [<param> ...]"
        echo "  cmd list:"
        echo "    create <sdk_folder>                create a project workspace, there is a hdf file in sdk_folder."
        echo "    init-config                        It will apply the configuration file which builds this project."
        echo "    up-hdf                              Update the hdf and build all."
        echo "    pull                               pull source from github"
        echo "    config <petalinux-config options>  configure with petalinux-config options"
        echo "    build <petalinux-build options>    build with petalinux-build options"
        echo "    image                              generate boot.bin file."
        echo "    copy <dest_folder>                 copy booting image to folder"
        echo "    todts <in-dtb> <out-dtb>           converting dtb to dts"
    }
    replace() {
        sed -i "s/${1//\//\\\/}.*/${2//\//\\\/}/" $ROOTPATH/$3
    }
    init_config() {
        replace CONFIG_SUBSYSTEM_COMPONENT_U__BOOT_NAME_EXT_LOCAL_SRC_PATH CONFIG_SUBSYSTEM_COMPONENT_U__BOOT_NAME_EXT_LOCAL_SRC_PATH=\"$ROOTPATH/components/u-boot-xlnx\" project-spec/configs/config
        replace CONFIG_SUBSYSTEM_COMPONENT_LINUX__KERNEL_NAME_EXT_LOCAL_SRC_PATH CONFIG_SUBSYSTEM_COMPONENT_LINUX__KERNEL_NAME_EXT_LOCAL_SRC_PATH=\"$ROOTPATH/components/linux-xlnx\" project-spec/configs/config
    }
    git_init() {
        cd $ROOTPATH/components/$1 && rm oe-logs oe-workdir && cd -
        msg "Delete oe-logs oe-workdir"
    }
    git_pull() {
        clone() {
            msg "git clone $1 and branch $GITBRANCH"
            if [ ! -d "$ROOTPATH/components/$1" ] ; then
                git clone https://github.com/peanutstars/$1.git $ROOTPATH/components/$1
                cd $ROOTPATH/components/$1 && git checkout $GITBRANCH ; cd -
            fi
        }
        pull() {
            cd $ROOTPATH/components/$1 && git pull ; cd -
        }
        msg "git pull"
        clone u-boot-xlnx
        pull u-boot-xlnx
        clone linux-xlnx
        pull linux-xlnx
    }
    peta_create() {
        petalinux-create --type project --template zynq --name Optic.181 --force
        git checkout .
#        git_init u-boot-xlnx
#        git_init linux-xlnx
        cd $ROOTPATH && petalinux-config --get-hw-description=$ROOTPATH/../Optic.hdf
        cd -
#        git_pull
#        init_config
    }
    peta_build() {
        cd $ROOTPATH && petalinux-build $*
        cd -
    }
    peta_config() {
        msg "petalinux-config $*"
        cd $ROOTPATH && petalinux-config $*
        cd -
    }
    peta_image() {
        petalinux-package --boot --fsbl $ROOTPATH/images/linux/zynq_fsbl.elf --fpga $ROOTPATH/../Optic.hdf/optic_zynq.bit --uboot -o $ROOTPATH/images/linux/BOOT.BIN --force
    }
    copy_to() {
        msg "Copy image to $1 folder."
        for f in BOOT.BIN image.ub; do
            echo "  >> $f"
            cp -a $ROOTPATH/images/linux/$f $1
        done
        umount $1
    }
    convert_dts() {
        [ -z "$2" -o -z "$1" ] && msg "Not enough Parameters" && exit
        $DTC -I dtb -O dts -o $2 $1
    }
    ##############################################################
    echo ROOT PATH: $ROOTPATH
    cmd=$1; shift
    case $cmd in
        [-]*help)
            usage
        ;;
        create)
            peta_create
        ;;
        init-config)
            init_config
        ;;
        pull)
            git_pull
        ;;
        up-hdf)
            cd $ROOTPATH && petalinux-config --get-hw-description=$ROOTPATH/../Optic.hdf
            cd -
            peta_build
            peta_image
        ;;
        build)
            peta_build $*
            if [ -z "$*" ] ; then peta_image; fi
        ;;
        config)
            peta_config $*
        ;;
        image)
            peta_image
        ;;
        copy)
            copy_to $1
        ;;
        todts)
            convert_dts $*
        ;;
        *)
            usage
        ;;
    esac
}
